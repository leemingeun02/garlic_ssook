#리스트 튜플 문자열 딕셔너리 셋 예전에 했었다
#이터러널(리스트, 튜플, 문자열)은 range
#딕셔너리 셋

#리스트 튜플
#딕셔너리는 반복을 할때 인덱스 대신에 쓸 수 있는 키가 존재하는 자료구조
#set
#set은 집합
#속도 굉장히 빠름(리스트, 튜플보다)
#set의 특징
#순서가 없다.
#중복이 불가능하다.
#집합의 연산이 가능하다.(합집합 차집합 교집합등)
#{중괄호} 사용 (딕셔너리와 마찬가지로)

# a = {} #딕셔너리
# print(type(a))

#비어있는 집합을 만들고싶다면
# b = set{}

#b.add(append 대신 add 사용가능)
#b.pop()

a = {1,2,3,4}
b = {3,4,5,6}

print(a.difference(b))
print(a.intersection(b))
print(a.union(b))

print(a- b) #얘도 차집합임
print(b-a) #얘랑 위에꺼랑 같음
#교집합은 없다 다른표현
#마이너스만 되는듯

print(a & b) #교집합이다
print(a | b) #뭐시기다

#when 쓰냐
#순회를 빨리하고싶을때
a = {1,2,3,4}
b = {3,4,5,6}
for i in range(

#함수
#수학에서 함수는 입력과 출력이 필수
#프로그램이에서 함수는입력과출력이 필수가 아님.
#어떤 장점이 있느냐? 이 함수를 사용한다면?
# 코드의 재사용성이 증가한다.
# 코드의 용도를 구분할 수 있다.(함수명을통해서)
# 실수를 줄일 수 있다.
# 함수를만들때는 def사용
def 함수이름():
    